// ------------------------------------
// Variables
// ------------------------------------

// Number of Columns
$columns: 12 !default;
$column-gutter: 15px !default;
$column-fraction-denominators: (1, 2, 3, 4, 5) !default;

// Formatting of classes
$grid-in-fractions: true !default;
$grid-in-columns: true !default;

// Container widths
$container-width-large: 1170px !default;
$container-width-medium: 970px !default;
$container-width-small: 750px !default;

// Breakpoints
$screen-large: 1200px !default;
$screen-medium: 992px !default;
$screen-small: 768px !default;

// Names
$container: 'container' !default;
$row: 'row' !default;
$cell: 'col' !default;

// ------------------------------------
// Mixins
// ------------------------------------

// Generate the different container sizes at various break points
// Usage:
//    @import generate-container ( <Nested List Of (breakpoint-size, container-size)> )
// Example:
//    @import generate-container ( (1200px, 1170px), (768px, 750px) )
@mixin generate-container ($breakpoints) {
  @each $bp-size, $container-size in $breakpoints {
    @media (min-width: $bp-size) {
      max-width: $container-size + ($column-gutter * 2);
    }
  }
}

// Cell Size Mixin
@mixin generate-cells ($columns, $breakpoint: null, $breakpoint-name: null) {
  @for $i from 1 through $columns {
    @if ($breakpoint and $breakpoint-name) {
      .#{$cell}--#{$i}-#{$breakpoint-name} {
        @media (min-width: $breakpoint) {
          width: $i / $columns * 100%;
        }
      }
    }
    @else {
      .#{$cell}--#{$i} {
        width: $i / $columns * 100%;
      }
    }
  }
}

@mixin cell-fractions-class-names($numerator, $denominator, $breakpoint: null, $breakpoint-name: null) {
  $fraction: #{$numerator}\/#{$denominator};
  $width: percentage($numerator/$denominator);

  @if ($numerator == $denominator) {
    $fraction: 1
  }

  @if ($breakpoint and $breakpoint-name) {
    .#{$cell}--#{$fraction}-#{$breakpoint-name} {
      @media (min-width: $breakpoint) {
        width: $width;
      }
    }
  }
  @else {
    .#{$cell}--#{$fraction} {
      width: $width;
    }
  }
}

// Cell Size Mixin
@mixin generate-cells-fractions ($breakpoint: null, $breakpoint-name: null) {
  @each $denominator in $column-fraction-denominators {
    @if $denominator == 1 {
      @include cell-fractions-class-names(1, 1, $breakpoint, $breakpoint-name);
    }

    @else {
      @for $i from 1 through ($denominator - 1) {
        @include cell-fractions-class-names($i, $denominator, $breakpoint, $breakpoint-name);
      }
    }
  }
}

// Grid Alignment Mixin
@mixin row-alignment ($position, $breakpoints) {
  .row--align-#{$position} {
    @content;
  }

  @each $bp-size, $name in $breakpoints {
    .row--align-#{$position}-#{$name} {
      @media (min-width: $bp-size) {
        @content;
      }
    }
  }
}

// Cell Alignment Mixin
@mixin cell-alignment ($position, $breakpoints) {
  .#{$cell}--align-#{$position} {
    @content;
  }
  @each $bp-size, $name in $breakpoints {
    .#{$cell}--align-#{$position}-#{$name} {
      @media (min-width: $bp-size) {
        @content;
      }
    }
  }
}


// ------------------------------------
// CSS
// ------------------------------------
.#{$container} {
  display: block;
  margin: 0 auto;
  padding: 0 $column-gutter;
  width: 100%;

  @include generate-container ((
    ($screen-small, $container-width-small),
    ($screen-medium, $container-width-medium),
    ($screen-large, $container-width-large),
  ));
}

.#{$container}-fluid {
  display: block;
  margin: 0 auto;
  padding: 0 $column-gutter;
  width: 100%;
}

.#{$row} {
  display: flex;
  flex-wrap: wrap;
  margin: (-$column-gutter);

  & + & {
    margin-top: $column-gutter;
  }

  &::after {
    content: ' ';
    display: table;
    clear: both;
  }
}

.#{$cell} {
  padding: 0 $column-gutter;
  margin: $column-gutter 0;
  width: 100%;
  float: left;
}

.#{$cell}--auto {
  @media (min-width: $screen-small) {
    flex: 1 1 auto;
    width: auto;
  }
}

// --------------------------------
// Generate the cell sizings for
// different breakpoints
// --------------------------------
@if ($grid-in-columns) {
  @include generate-cells($columns);
  @include generate-cells($columns, $screen-small, 'small');
  @include generate-cells($columns, $screen-medium, 'medium');
  @include generate-cells($columns, $screen-large, 'large');
}

@if ($grid-in-fractions) {
  @include generate-cells-fractions();
  @include generate-cells-fractions($screen-small, 'small');
  @include generate-cells-fractions($screen-medium, 'medium');
  @include generate-cells-fractions($screen-large, 'large');
}

// --------------------------------
//      Row Horizontal Alignment
// --------------------------------
@include row-alignment('left', (
  ($screen-small, 'small'),
  ($screen-medium, 'medium'),
  ($screen-large, 'large'),)
) {
  justify-content: flex-start;
}

@include row-alignment('right', (
  ($screen-small, 'small'),
  ($screen-medium, 'medium'),
  ($screen-large, 'large'),)
) {
  justify-content: flex-end;
}

@include row-alignment('center', (
  ($screen-small, 'small'),
  ($screen-medium, 'medium'),
  ($screen-large, 'large'),)
) {
  justify-content: center;
}

// --------------------------------
//      Row Vertical Alignment
// --------------------------------
@include row-alignment('top', (
  ($screen-small, 'small'),
  ($screen-medium, 'medium'),
  ($screen-large, 'large'),)
) {
  align-items: flex-start;
}

@include row-alignment('bottom', (
  ($screen-small, 'small'),
  ($screen-medium, 'medium'),
  ($screen-large, 'large'),)
) {
  align-items: flex-end;
}

@include row-alignment('middle', (
  ($screen-small, 'small'),
  ($screen-medium, 'medium'),
  ($screen-large, 'large'),)
) {
  align-items: center;
}

// --------------------------------
//      Cell Vertical Alignment
// --------------------------------
@include cell-alignment('top', (
  ($screen-small, 'small'),
  ($screen-medium, 'medium'),
  ($screen-large, 'large'),)
) {
  align-self: flex-start;
}

@include cell-alignment('bottom', (
  ($screen-small, 'small'),
  ($screen-medium, 'medium'),
  ($screen-large, 'large'),)
) {
  align-self: flex-end;
}

@include cell-alignment('middle', (
  ($screen-small, 'small'),
  ($screen-medium, 'medium'),
  ($screen-large, 'large'),)
) {
  align-self: center;
}
